{"version":3,"sources":["components/pixel/Pixel.js","App.js","serviceWorker.js","index.js"],"names":["Pixel","props","state","image","0","1","3","params","url","apiResponse","getPixel","bind","handleErrors","response","ok","Error","statusText","fetch","this","then","res","text","setState","Fragment","className","src","width","alt","onClick","React","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"qTAwFeA,G,wDApFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACXC,MAAO,CACHC,EAAG,sCACHC,EAAG,sCACHC,EAAG,uCAELC,OAAQ,CACJ,YAAe,QACf,OAAU,WACV,QAAW,wBACX,GAAM,aACN,GAAM,aACN,GAAM,eACN,YAAe,gBAEnBC,IAAK,yIACLC,YAAa,uCAEjB,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBApBD,E,oGAyBNC,E,wEAAAA,E,SAAaC,GAClB,IAAKA,EAASC,GACV,MAAMC,MAAMF,EAASG,YAEzB,OAAOH,GA2BXI,MAAMC,KAAKhB,MAAMM,KAChBW,KAAKP,GACLO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAI,EAAKE,SAAS,CACvBb,YAAaW,O,qIAOjB,OACI,kBAAC,IAAMG,SAAP,KACI,yBAAKC,UAAU,OAIX,yBAAKA,UAAU,UACX,yBAAKC,IAAKP,KAAKhB,MAAMO,YAAaiB,MAAM,OAAOC,IAAI,YAG3D,4BAAQH,UAAU,SAASI,QAASV,KAAKR,UAAzC,e,GA9EKmB,IAAMC,YCSZC,MARf,WACE,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,QCQAQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAyCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTpB,MAAK,SAAAyB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfuC,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MChGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDenB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,eAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,eAAN,sBAEP9B,IAmEV,SAAiCO,EAAOC,GAEtCvB,MAAMsB,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5B/C,MAAK,SAAAN,GAEJ,IAAMsD,EAActD,EAASqD,QAAQE,IAAI,gBAEnB,MAApBvD,EAASwD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAMpD,MAAK,SAAAyB,GACjCA,EAAa4B,aAAarD,MAAK,WAC7Be,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLJ,QAAQC,IACN,oEA1FAuB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAMpD,MAAK,WACjC+B,QAAQC,IACN,iHAQJb,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.27df1216.chunk.js","sourcesContent":["import React from 'react'\nimport './Pixel.css'\n\nclass  Pixel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          image: {\n              0: 'http://via.placeholder.com/400x400/', \n              1: 'http://via.placeholder.com/500x700/', \n              3: 'http://via.placeholder.com/600x500/'\n            },\n            params: {\n                \"interaction\": \"event\",\n                \"client\": \"customer\", \n                \"os_name\": \"operating_system_name\",\n                \"x1\": \"utm_source\",\n                \"x2\": \"utm_medium\",\n                \"x3\": \"utm_campaign\",\n                \"landing_url\": \"campaign_url\"\n            },\n            url: \"http://localhost:9000/pixel.gif?interaction=UserClick&client=ad_media&os_name=macos&x1=google&x2=email&x3=pdfconvert&landing_url=abcd1\",\n            apiResponse: \"http://via.placeholder.com/600x500/\"\n        }\n        this.getPixel = this.getPixel.bind(this);\n      }\n\n    async getPixel() {\n\n        function handleErrors(response) {\n            if (!response.ok) {\n                throw Error(response.statusText);\n            }\n            return response;\n        }\n\n    // const reqParams = {\n    //     interaction: 'event',\n    //     client: 'customer',\n    //     os_name: 'operating_system_name',\n    //     x1: 'utm_source',\n    //     x2: 'utm_medium',\n    //     x3: 'utm_campaign',\n    //     landing_url: 'campaign_url'\n    // }\n\n    // const url = new URL(this.state.url);\n    // console.log(url);\n    // let newURL = url.origin+url.pathname+'?';\n    // const urlParams = new URLSearchParams(url.search);\n    // let keys = urlParams.keys();\n    //     for(let key of keys) { \n    //     newURL = newURL + reqParams[key]+ '=' + urlParams.get(key) + '&'\n    //     }\n    \n    // let lastChar = newURL[newURL.length -1];\n    // if (lastChar == '&') {\n    //     newURL = newURL.substring(0, newURL.length-1);\n    // }\n        // console.log(\"newURL \"+newURL)\n        fetch(this.state.url)\n        .then(handleErrors)\n        .then(res => res.text())\n        .then(res => this.setState({\n            apiResponse: res\n        }));\n       \n        // console.log(this.state.apiResponse);\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                <div className=\"row\"> \n                    {/* <div className=\"column\">\n                        <img src={this.state.image[0]} width=\"100%\" alt=\"click\" />                        \n                    </div> */}\n                    <div className=\"column\">\n                        <img src={this.state.apiResponse} width=\"100%\" alt=\"click\" />                        \n                    </div>\n                </div>\n                <button className=\"button\" onClick={this.getPixel}>Button</button>\n            </React.Fragment>\n        )\n    }\n}\n\n\nexport default Pixel","import React from 'react';\nimport './App.css';\nimport Pixel from './components/pixel/Pixel'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pixel></Pixel>\n    </div>\n  );\n}\n\nexport default App;\n","\n  \n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n          \n        });\n\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n"],"sourceRoot":""}